name: Android Release

on:
  workflow_dispatch:
    inputs:
      version_name:
        description: 'Version Name (例: 1.0.1)'
        required: true
        type: string

permissions:
  contents: write
  pull-requests: write
  actions: read

defaults:
  run:
    shell: bash

jobs:
  release:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Calculate next version code
        id: calc_version
        run: |
          # 現在のバージョンコードを取得
          CURRENT_VERSION_CODE=$(grep -oP 'versionCode\s*=\s*\K\d+' app/build.gradle.kts || echo "0")
          NEXT_VERSION_CODE=$((CURRENT_VERSION_CODE + 1))
          echo "current_version_code=$CURRENT_VERSION_CODE" >> $GITHUB_OUTPUT
          echo "next_version_code=$NEXT_VERSION_CODE" >> $GITHUB_OUTPUT
          echo "Current version code: $CURRENT_VERSION_CODE"
          echo "Next version code: $NEXT_VERSION_CODE"

      - name: Bump Version
        uses: chkfung/android-version-actions@v1.2.2
        with:
          gradlePath: app/build.gradle.kts
          versionName: ${{ github.event.inputs.version_name }}
          versionCode: ${{ steps.calc_version.outputs.next_version_code }}

      - name: Create properties files
        run: |
          echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" >> secret.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> secret.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> secret.properties

      - name: Decode KeyStore
        run: |
          if [ -z "${{ secrets.KEYSTORE_BASE64 }}" ]; then
            echo "Error: KEYSTORE_BASE64 secret is not set"
            exit 1
          fi
          
          # base64データを一時ファイルに保存してからデコード
          echo "${{ secrets.KEYSTORE_BASE64 }}" > temp_keystore_b64.txt
          
          # 改行とスペースを除去
          tr -d '\n\r\t ' < temp_keystore_b64.txt > clean_keystore_b64.txt
          
          # base64デコードを実行
          if ! base64 --decode clean_keystore_b64.txt > app/release.jks 2>/dev/null; then
            echo "Error: Failed to decode base64 keystore data"
            echo "Please check if KEYSTORE_BASE64 secret contains valid base64 data"
            rm -f temp_keystore_b64.txt clean_keystore_b64.txt
            exit 1
          fi
          
          # 一時ファイルを削除
          rm -f temp_keystore_b64.txt clean_keystore_b64.txt
          
          # キーストアファイルの存在と内容確認
          if [ ! -f app/release.jks ] || [ ! -s app/release.jks ]; then
            echo "Error: Keystore file was not created or is empty"
            exit 1
          fi
          
          # キーストアファイルの妥当性確認（オプション）
          if command -v keytool >/dev/null 2>&1; then
            if ! keytool -list -keystore app/release.jks -storepass "${{ secrets.KEYSTORE_PASSWORD }}" >/dev/null 2>&1; then
              echo "Warning: Keystore file may be corrupted or password incorrect"
            else
              echo "Keystore file validated successfully"
            fi
          fi
          
          echo "Keystore file created successfully"

      - name: Build Release
        run: ./gradlew assembleRelease bundleRelease

      - name: Setup Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Create Release Branch
        id: create_branch
        run: |
          BRANCH_NAME="release/v${{ github.event.inputs.version_name }}-${{ steps.calc_version.outputs.next_version_code }}"
          git checkout -b $BRANCH_NAME
          git add app/build.gradle.kts
          git commit -m "Release v${{ github.event.inputs.version_name }} (build ${{ steps.calc_version.outputs.next_version_code }})"
          git push origin $BRANCH_NAME
          echo "RELEASE_BRANCH=$BRANCH_NAME" >> $GITHUB_ENV
          echo "branch_created=true" >> $GITHUB_OUTPUT

      - name: Rollback on failure
        if: failure()
        run: |
          echo "Workflow failed, rolling back version changes..."
          
          # ブランチが作成されていた場合は削除
          if [ "${{ steps.create_branch.outputs.branch_created }}" == "true" ]; then
            echo "Deleting failed release branch: $RELEASE_BRANCH"
            git push origin --delete $RELEASE_BRANCH 2>/dev/null || true
          fi
          
          # mainブランチに戻る
          git checkout main 2>/dev/null || git checkout master 2>/dev/null || true
          
          # ローカルの変更を破棄
          git reset --hard HEAD
          git clean -fd
          
          echo "Rollback completed. Version remains at original state."

      - name: Upload APK as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release-${{ github.event.inputs.version_name }}-${{ github.run_number }}.apk
          path: app/build/outputs/apk/release/*.apk

      - name: Upload AAB as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release-${{ github.event.inputs.version_name }}-${{ github.run_number }}.aab
          path: app/build/outputs/bundle/release/*.aab

      - name: Generate Release Notes
        id: release_notes
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -z "$LAST_TAG" ]; then
            RELEASE_NOTES="## Initial Release
          
          Version: ${{ github.event.inputs.version_name }}
          Build: ${{ steps.calc_version.outputs.next_version_code }}
          
          This is the initial release of the application."
          else
            echo "## Changes since $LAST_TAG" > release_notes.md
            echo "" >> release_notes.md
            echo "Version: ${{ github.event.inputs.version_name }}" >> release_notes.md
            echo "Build: ${{ github.run_number }}" >> release_notes.md
            echo "" >> release_notes.md
          
            # マージされたPRのリストを取得
            git log ${LAST_TAG}..HEAD --oneline --merges --grep="Merge pull request" | \
            grep -oP '#\K\d+' | while read pr; do 
              gh pr view $pr --json number,title --jq '"- [#\(.number)](${{ github.server_url }}/${{ github.repository }}/pull/\(.number)) \(.title)"' 2>/dev/null || echo "- PR #$pr"
            done >> release_notes.md
          
            RELEASE_NOTES=$(cat release_notes.md)
          fi
          
          # 複数行の出力をGitHub環境変数に設定
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo "$RELEASE_NOTES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create GitHub Release
        id: create_release
        run: |
          # リリースノートの内容を確認
          echo "Creating release with notes:"
          echo "$RELEASE_NOTES"
          
          gh release create "v${{ github.event.inputs.version_name }}" \
            --title "Release v${{ github.event.inputs.version_name }}" \
            --notes-file release_notes.md \
            --draft

      - name: Check Existing Pull Request
        id: check_pr
        run: |
          pr_count=$(gh pr list -H $RELEASE_BRANCH -B main --json number | jq length)
          echo "count=$pr_count" >> $GITHUB_OUTPUT

      - name: Create Pull Request
        if: steps.check_pr.outputs.count == '0'
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          gh pr create \
            --head $RELEASE_BRANCH \
            --base main \
            --title "Release v${{ github.event.inputs.version_name }}" \
            --body "## Release Summary
          
          Version: ${{ github.event.inputs.version_name }}
          Build: ${{ github.run_number }}
          
          $RELEASE_NOTES
          
          ## Files Changed
          - Updated version in \`app/build.gradle.kts\`
          
          ## Release Assets
          - APK: Available in GitHub Release
          - AAB: Available in GitHub Release
          
          ## Next Steps
          1. Review and test the release
          2. Merge this PR to main
          3. Publish the GitHub Release (currently draft)"

      - name: Summary
        run: |
          echo "## Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Version**: ${{ github.event.inputs.version_name }}" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Build Number**: ${{ steps.calc_version.outputs.next_version_code }}" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Branch**: $RELEASE_BRANCH" >> $GITHUB_STEP_SUMMARY
          echo "✅ **APK/AAB**: Built and uploaded" >> $GITHUB_STEP_SUMMARY
          echo "✅ **GitHub Release**: Created (draft)" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Pull Request**: Created or already exists" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 [View Release](https://github.com/${{ github.repository }}/releases/tag/v${{ github.event.inputs.version_name }})" >> $GITHUB_STEP_SUMMARY